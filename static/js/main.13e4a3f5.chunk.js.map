{"version":3,"sources":["types/Status.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","TodoList","todos","selectedTodoId","selectTodo","className","map","id","title","completed","classNames","type","onClick","TodoFilter","allTodos","onSetTodos","useState","setCompleted","query","setQuery","setVisibleTodos","str","selectedStatus","filter","todo","todoStatus","active","filterCallbackByCompleted","toLowerCase","includes","trim","filterCallbackByTitle","handleQueryChange","queryValue","value","onChange","event","currentStatus","target","all","placeholder","e","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","TodoModal","selectedTodo","user","setUser","useEffect","userId","href","email","name","App","setAllTodos","todoId","setTodoId","visibleTodos","find","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13e4a3f5.chunk.js","sourcesContent":["export enum Status {\n  all = 'all',\n  completed = 'completed',\n  active = 'active',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodoId: number;\n  selectTodo: (id:number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodoId,\n  selectTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(({ id, title, completed }) => (\n          <tr\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': selectedTodoId === id,\n            })}\n            key={id}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            {completed ? (\n              <td className=\"is-vcentered\">\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </td>\n            ) : (\n              <td className=\"is-vcentered\" />\n            )}\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-danger': !completed,\n                'has-text-success': completed,\n              })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  selectTodo(id);\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye': selectedTodoId !== id,\n                    'fa-eye-slash': selectedTodoId === id,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useState } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { Status } from '../../types/Status';\n\ntype Props = {\n  allTodos: Todo[];\n  onSetTodos: (allTodos: Todo[]) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  allTodos,\n  onSetTodos,\n}) => {\n  const [completed, setCompleted] = useState('all');\n  const [query, setQuery] = useState('');\n\n  const filterCallbackByCompleted\n  = (todoStatus: boolean, selectedStatus: string) => {\n    switch (selectedStatus) {\n      case Status.active:\n        return !todoStatus;\n      case Status.completed:\n        return todoStatus;\n      default:\n        return true;\n    }\n  };\n\n  const filterCallbackByTitle = (title: string, str: string) => {\n    return title.toLowerCase().includes(str.trim().toLowerCase());\n  };\n\n  const setVisibleTodos = (str: string, selectedStatus: string) => {\n    onSetTodos(allTodos\n      .filter(todo => filterCallbackByCompleted(todo.completed, selectedStatus))\n      .filter(todo => filterCallbackByTitle(todo.title, str)));\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const currentStatus = event.target.value;\n\n    setCompleted(currentStatus);\n    setVisibleTodos(query, currentStatus);\n  };\n\n  const handleQueryChange = (queryValue:string) => {\n    setQuery(queryValue);\n    setVisibleTodos(queryValue, completed);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={completed}\n            onChange={handleSelect}\n          >\n            <option value={Status.all}>{Status.all}</option>\n            <option value={Status.active}>{Status.active}</option>\n            <option value={Status.completed}>{Status.completed}</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => handleQueryChange(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => handleQueryChange('')}\n            >\n              x\n            </button>\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo | null;\n  selectTodo: (id:number) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodo,\n  selectTodo,\n}) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    if (selectedTodo) {\n      getUser(selectedTodo.userId).then(setUser);\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user || !selectedTodo ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                selectTodo(0);\n              }}\n            >\n              x\n            </button>\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [allTodos, setAllTodos] = useState<Todo[]>([]);\n  const [todoId, setTodoId] = useState(0);\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n\n  useEffect(() => {\n    getTodos().then(setAllTodos);\n    getTodos().then(setVisibleTodos);\n  }, []);\n\n  const selectedTodo = visibleTodos.find(todo => todo.id === todoId) || null;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                allTodos={allTodos}\n                onSetTodos={(todos: Todo[]) => setVisibleTodos(todos)}\n              />\n            </div>\n\n            <div className=\"block\">\n              {allTodos.length === 0 ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodoId={todoId}\n                  selectTodo={(id: number) => setTodoId(id)}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {todoId !== 0\n        && (\n          <TodoModal\n            selectedTodo={selectedTodo}\n            selectTodo={(id: number) => setTodoId(id)}\n          />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}